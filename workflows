#!/usr/bin/env sh
set -e
# 8 ANSI colors
TEXT_COLOR_BLACK=30
TEXT_COLOR_RED=31
TEXT_COLOR_GREEN=32
TEXT_COLOR_BROWN=33
TEXT_COLOR_BLUE=34
TEXT_COLOR_PURPLE=35
TEXT_COLOR_CYAN=36
TEXT_COLOR_GRAY=37
TEXT_COLOR_DEFAULT=0

# 4 ANSI text formats
TEXT_FORMAT_NORMAL=0
TEXT_FORMAT_BOLD=1
TEXT_FORMAT_UNDERLINE=4
TEXT_FORMAT_BLINKING=5

FULL_IMAGE_NAME=extsoft/numbers-api

colored_line() {
    # usage: colored_line <format> <color> <message>...
    local COLOR=""
    local RESET=""
    if [ -t 1 ]; then
        COLOR="\e[${1};${2}m"
        RESET="\e[m"
    fi
    shift; shift
    printf "${COLOR}"
    local prefix=""
    for part in "$@"; do
        printf "%s" "${prefix}${part}"
        prefix=" "
    done
    printf "${RESET}"
}

colored_text() {
    # usage: colored_text <format> <color> <message>...
    colored_line "$@"
    printf "\n"
}

command_text() {
    # Display a CLI command
    local COLOR=""
    local RESET=""
    if [ -t 1 ]; then
        COLOR="\e[${TEXT_FORMAT_BOLD};${TEXT_COLOR_GREEN}m"
        RESET="\e[m"
    fi
    printf "${COLOR}==>> ${RESET}"
    colored_text ${TEXT_FORMAT_BOLD} ${TEXT_COLOR_BLUE} "$@"
}

info_text() {
    # Display a regular message
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_GREEN} "$@"
}

box_text(){
    local LAYOUT=${1}
    shift
    local template="$@xxxx"
    local delimeter=${replace:-=}
    ${LAYOUT} "${template//?/${delimeter}}"
    ${LAYOUT} "${delimeter} $@ ${delimeter}"
    ${LAYOUT} "${template//?/${delimeter}}"
}

info_box() {
    # Display an important message
     box_text info_text "$@"
}

error_text() {
    # Display an error message within a single-line log
    colored_text ${TEXT_FORMAT_BOLD} ${TEXT_COLOR_RED} "$@"
}

error_box() {
    # Display an error message within a multi-line log
    box_text error_text "$@"
}

question_text() {
    # Display a question on current cursor's line
    colored_line ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_PURPLE} "$@"
}

verbose_execution() {
    command_text "$@"
    "$@"
}

format_code() {
    info_box "Formatting Python code ..."
    verbose_execution python -m isort --recursive --apply thenumbers tests
    verbose_execution python -m black thenumbers tests
}

analyze_code() {
    info_box "Verifying Python code ..."
    (
        verbose_execution python -m black --check thenumbers tests
        verbose_execution python -m flake8 thenumbers
        verbose_execution python -m mypy thenumbers
    ) || {
        error_box "The code verification is failed!!!"
        error_text "Please check the output above to find a reason."
        exit 1
    }
}

test_code() {
    info_box "Running unit testing..."
    verbose_execution python -m pytest tests
}

assess_code() {
    (
        analyze_code
        test_code
    ) || {
        error_box "The code assessment is failed! :("
        exit 1
    }
}

install_all_tools() {
    info_box "Configuring development environment..."
    verbose_execution python -m pip install -r requirements.txt
    verbose_execution python -m pip install -r requirements-test.txt
}

build_image() {
    verbose_execution docker build \
        --tag ${FULL_IMAGE_NAME} \
        --label commit=$(git rev-parse @) \
        --label branch=$(git rev-parse --abbrev-ref @) \
        --label version=$(git describe | echo "unknown") \
        .
}

assess_image(){
    local container=test
    info_text "Starting '${container}' container to check '${FULL_IMAGE_NAME}' image..."
    info_text "Wait for 'healthy' container status..."
    local attempt=0
    verbose_execution docker run -itd --rm --name ${container} ${FULL_IMAGE_NAME}
    while [ ! $(docker inspect --format='{{json .State.Health.Status}}' ${container})  = "\"healthy\"" ]; do
		attempt=$((attempt+1))
		verbose_execution sleep 2s
		if [ ${attempt} -gt 10 ]; then
		    error_box "The container is not healthy. Something goes wrong..."
		    verbose_execution docker logs ${container}
		    verbose_execution docker stop ${container}
		    exit 1
		fi
	done
	info_text "The '${FULL_IMAGE_NAME}' image has great health!"
	verbose_execution docker stop ${container}
}

run_app() {
    verbose_execution python -m thenumbers
}

usage() {
    colored_text ${TEXT_FORMAT_BOLD} ${TEXT_COLOR_BLACK} "usage: ./workflows <command>"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} ""
    colored_text ${TEXT_FORMAT_UNDERLINE} ${TEXT_COLOR_BLACK} "Commands:"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - format_code            formats the code"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - analyze_code           checks the quality of the code"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - test_code              runs unit testing"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - assess_code            runs all checks against the code"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - install_all_tools      installs required Python packages"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - build_image            creates a new Docker image"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - assess_image           checks the Docker image health"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - run_app                starts the server"
    colored_text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - help                   prints this message"
}

main() {
    case ${1} in
        -h|--help|help) usage ;;
        *) for target in "$@"; do eval "${target}"; done ;;
    esac
}

main "$@"
