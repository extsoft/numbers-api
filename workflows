#!/usr/bin/env bash
set -e
# 8 ANSI colors
TEXT_COLOR_BLACK=30
TEXT_COLOR_RED=31
TEXT_COLOR_GREEN=32
TEXT_COLOR_BROWN=33
TEXT_COLOR_BLUE=34
TEXT_COLOR_PURPLE=35
TEXT_COLOR_CYAN=36
TEXT_COLOR_GRAY=37
TEXT_COLOR_DEFAULT=0

# 4 ANSI text formats
TEXT_FORMAT_NORMAL=0
TEXT_FORMAT_BOLD=1
TEXT_FORMAT_UNDERLINE=4
TEXT_FORMAT_BLINKING=5

FULL_IMAGE_NAME=extsoft/numbers-api

--colored-line() {
    # usage: --colored-line <format> <color> <message>...
    local COLOR=""
    local RESET=""
    if [[ -t 1 ]]; then
        COLOR="\e[${1};${2}m"
        RESET="\e[m"
    fi
    shift; shift
    printf "${COLOR}"
    local prefix=""
    for part in "$@"; do
        printf "%s" "${prefix}${part}"
        prefix=" "
    done
    printf "${RESET}"
}

--colored-text() {
    # usage: --colored-text <format> <color> <message>...
    --colored-line "$@"
    printf "\n"
}

--command-text() {
    # Display a CLI command
    local COLOR=""
    local RESET=""
    if [[ -t 1 ]]; then
        COLOR="\e[${TEXT_FORMAT_BOLD};${TEXT_COLOR_GREEN}m"
        RESET="\e[m"
    fi
    printf "${COLOR}==>> ${RESET}"
    --colored-text ${TEXT_FORMAT_BOLD} ${TEXT_COLOR_BLUE} "$@"
}

info-text() {
    # Display a regular message
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_GREEN} "$@"
}

--box-text(){
    local LAYOUT=${1}
    shift
    t="$@xxxxxx"
    c=${replace:-=}
    ${LAYOUT} ${t//?/$c}
    ${LAYOUT} "$c$c $@ $c$c"
    ${LAYOUT} ${t//?/$c}
}

info-box() {
    # Display an important message
     --box-text info-text "$@"
}

error-text() {
    # Display an error message within a single-line log
    --colored-text ${TEXT_FORMAT_BOLD} ${TEXT_COLOR_RED} "$@"
}

error-box() {
    # Display an error message within a multi-line log
    --box-text error-text "$@"
}

question-text() {
    # Display a question on current cursor's line
    --colored-line ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_PURPLE} "$@"
}

verbose-execution () {
    --command-text "$@"
    "$@"
}

format-code() {
    info-box "Formatting Python code ..."
    verbose-execution python -m isort --recursive --apply thenumbers tests
    verbose-execution python -m black thenumbers tests
}

analyze-code() {
    info-box "Verifying Python code ..."
    (
        verbose-execution python -m black --check thenumbers tests
        verbose-execution python -m flake8 thenumbers
        verbose-execution python -m mypy thenumbers
    ) || {
        error-box "The code verification is failed!!!"
        error-text "Please check the output above to find a reason."
        exit 1
    }
}

test-code() {
    info-box "Running unit testing..."
    verbose-execution python -m pytest tests
}

assess-code() {
    (
        analyze-code
        test-code
    ) || {
        error-box "The code assessment is failed! :("
        exit 1
    }
}

install-all-tools() {
    info-box "Configuring development environment..."
    verbose-execution python -m pip install -r requirements.txt
    verbose-execution python -m pip install -r requirements-test.txt
}

build-image() {
    verbose-execution docker build \
        --tag ${FULL_IMAGE_NAME} \
        --label commit=$(git rev-parse @) \
        --label branch=$(git rev-parse --abbrev-ref @) \
        --label version=$(git describe | echo "unknown") \
        .
}

assess-image(){
    local container=test
    info-text "Starting '${container}' container to check '${FULL_IMAGE_NAME}' image..."
    info-text "Wait for 'healthy' container status..."
    local attempt=0
    verbose-execution docker run -itd --rm --name ${container} ${FULL_IMAGE_NAME}
    while [[ ! $(docker inspect --format='{{json .State.Health.Status}}' ${container})  == \"healthy\" ]]; do
		attempt=$((attempt+1))
		verbose-execution sleep 2s
		if [[ ${attempt} -gt 10 ]]; then
		    error-box "The container is not healthy. Something goes wrong..."
		    verbose-execution docker logs ${container}
		    verbose-execution docker stop ${container}
		    exit 1
		fi
	done
	info-text "The '${FULL_IMAGE_NAME}' image has great health!"
	verbose-execution docker stop ${container}
}

run-app() {
    verbose-execution python -m thenumbers
}

--help() {
    --colored-text ${TEXT_FORMAT_BOLD} ${TEXT_COLOR_BLACK} "usage: ./workflows <command>"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} ""
    --colored-text ${TEXT_FORMAT_UNDERLINE} ${TEXT_COLOR_BLACK} "Commands:"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - format-code            formats the code"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - analyze-code           checks the quality of the code"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - test-code              runs unit testing"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - assess-code            runs all checks against the code"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - install-all-tools      installs required Python packages"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - build-image            creates a new Docker image"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - assess-image           checks the Docker image health"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - run-app                starts the server"
    --colored-text ${TEXT_FORMAT_NORMAL} ${TEXT_COLOR_BLACK} " - help                   prints this message"
}

main() {
    case ${1} in
        -h|--help|help) --help ;;
        *) for target in "$@"; do "${target}"; done ;;
    esac
}

main "$@"
